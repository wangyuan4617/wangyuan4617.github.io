<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/21/hello-world/"/>
    <url>/2024/09/21/hello-world/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs ada">先前我总觉得思念二字太俗气，自从遇见了你，我才自知是个俗人<span class="hljs-comment">-- 《甲方乙方》</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs ada">当你在我眼前的时候，你是一切；当你不在我眼前的时候，一切是你<span class="hljs-comment">-- 《编辑部的故事》</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs ada">有几次我梦见你，你如此清晰的站在我面前，是我激动不已，一旦惊醒，心如刀绞<span class="hljs-comment">-- 《不见不散》</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs ada">人生乐在相知心，我就是一把干柴<span class="hljs-comment">-- 《编辑部的故事》</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs ada">我本将心向明月，奈何明月照沟渠<span class="hljs-comment">-- 《天下无贼》</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs ada">万物与我都是荒诞的静寂，此时我想你了<span class="hljs-comment">-- 佩索阿《我的心迟到了》</span><span class="hljs-comment">-- 《天下无贼》</span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>纯css弹窗处理</title>
    <link href="/2024/07/11/%E7%BA%AFcss%E5%BC%B9%E7%AA%97%E5%A4%84%E7%90%86/"/>
    <url>/2024/07/11/%E7%BA%AFcss%E5%BC%B9%E7%AA%97%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="一、使用情况"><a href="#一、使用情况" class="headerlink" title="一、使用情况"></a>一、使用情况</h3><p>最开始是要做一个高德地图展示，需要在多个 market 上展示弹窗，但是高德地图的 infoWindow 同时只能存在一个，所以需要自己写 market 的逻辑</p><div class="code-wrapper"><pre><code class="hljs">可以直接使用react-amap这个包给market传入组件就不需要考虑这个问题</code></pre></div><h3 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h3><p>1、利用 type 为 checkbox 的 input 标签的选中和非选中实现两种状态<br>2、 css 中的选择器实现 style 的改变，通过切换 display 的状态来展示弹窗</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 省去了一些样式 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;marker&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputId&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--此svg是一个带波纹动画的圆圈--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">svg</span></span><span class="hljs-tag">      <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;20&quot;</span></span><span class="hljs-tag">      <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;20&quot;</span></span><span class="hljs-tag">      <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 40 40&quot;</span></span><span class="hljs-tag">      <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span></span><span class="hljs-tag">    &gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;red&quot;</span> /&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">circle</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">cx</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">cy</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">r</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">animate</span></span><span class="hljs-tag">          <span class="hljs-attr">attributeName</span>=<span class="hljs-string">&quot;r&quot;</span></span><span class="hljs-tag">          <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;0&quot;</span></span><span class="hljs-tag">          <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;20&quot;</span></span><span class="hljs-tag">          <span class="hljs-attr">dur</span>=<span class="hljs-string">&quot;1s&quot;</span></span><span class="hljs-tag">          <span class="hljs-attr">repeatCount</span>=<span class="hljs-string">&quot;indefinite&quot;</span></span><span class="hljs-tag">        /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">animate</span></span><span class="hljs-tag">          <span class="hljs-attr">attributeName</span>=<span class="hljs-string">&quot;opacity&quot;</span></span><span class="hljs-tag">          <span class="hljs-attr">from</span>=<span class="hljs-string">&quot;1&quot;</span></span><span class="hljs-tag">          <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;0.1&quot;</span></span><span class="hljs-tag">          <span class="hljs-attr">dur</span>=<span class="hljs-string">&quot;1s&quot;</span></span><span class="hljs-tag">          <span class="hljs-attr">repeatCount</span>=<span class="hljs-string">&quot;indefinite&quot;</span></span><span class="hljs-tag">        /&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">circle</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;check_input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputId&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!--此div必须要和input相邻--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;infoWindow&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--在这里写悬浮窗中的内容--&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.marker</span> &#123;  <span class="hljs-attribute">position</span>: relative;  <span class="hljs-comment">/*设置宽高颜色等 */</span>&#125;<span class="hljs-selector-class">.infoWindow</span> &#123;  <span class="hljs-comment">/*设置窗口的样式*/</span>  <span class="hljs-attribute">position</span>: absolute;  <span class="hljs-attribute">display</span>: none;&#125;<span class="hljs-comment">/**重点 通过选择器实现切换显示隐藏*/</span><span class="hljs-selector-class">.check_input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;checkbox&quot;</span>]</span><span class="hljs-selector-pseudo">:checked</span> + <span class="hljs-selector-class">.infoWindow</span> &#123;  <span class="hljs-attribute">display</span>: block;&#125;</code></pre></div><h3 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h3><p>原生 html 写起来挺麻烦的，但是是一种解题思路，想要简单的实现方式还是需要用第三方包，</p><p><a href="https://codepen.io/wangyuan4617/pen/rNgOWza">codePen 在线看效果</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sheetjs带样式导出</title>
    <link href="/2024/07/11/sheetjs%E5%B8%A6%E6%A0%B7%E5%BC%8F%E5%AF%BC%E5%87%BA/"/>
    <url>/2024/07/11/sheetjs%E5%B8%A6%E6%A0%B7%E5%BC%8F%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="一、引入需要的包"><a href="#一、引入需要的包" class="headerlink" title="一、引入需要的包"></a>一、引入需要的包</h3><p>在 sheetjs 中只能导出默认不带样式的表格，如果需要表格宽度、字体颜色、单元格背景颜色等，需要引入另外的包</p><div class="code-wrapper"><pre><code class="hljs js">npm install xlsx-js-style</code></pre></div><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>使用 xlsx-js-style 和 sheetjs 的形式相差不大，需要从 xlsx 中导出 写文件的方法</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; utils, writeFile &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xlsx-js-style&quot;</span>;</code></pre></div><p>使用时需要把每个单元格都看一个对象，这个对象包含单元格的数据和样式</p><div class="code-wrapper"><pre><code class="hljs js">&#123;    <span class="hljs-attr">v</span>: <span class="hljs-string">&quot;数据&quot;</span>,<span class="hljs-comment">// v-&gt;value</span>    <span class="hljs-attr">t</span>: <span class="hljs-string">&quot;s&quot;</span>,<span class="hljs-comment">// t-&gt;type 数据类型</span>    <span class="hljs-attr">s</span>: &#123; <span class="hljs-comment">//s-&gt;style</span>        <span class="hljs-attr">font</span>: &#123; <span class="hljs-comment">//字体相关设置</span>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;微软雅黑&quot;</span>,<span class="hljs-comment">//字体</span>            <span class="hljs-attr">sz</span>: <span class="hljs-number">12</span>,<span class="hljs-comment">//字体大小</span>            <span class="hljs-attr">bold</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//是否粗体</span>        &#125;,        <span class="hljs-attr">border</span>:&#123;<span class="hljs-comment">// 单元格边框相关</span>        <span class="hljs-attr">top</span>:&#123;<span class="hljs-comment">// 上边框</span>            <span class="hljs-attr">style</span>: <span class="hljs-string">&quot;thin&quot;</span>,<span class="hljs-comment">// 细线</span>            <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#000000&#x27;</span>        &#125;,        <span class="hljs-attr">bottom</span>:&#123;...&#125;,<span class="hljs-comment">// 下边框</span>        <span class="hljs-attr">left</span>:&#123;...&#125;,<span class="hljs-comment">// 左边框</span>        <span class="hljs-attr">right</span>:&#123;...&#125;<span class="hljs-comment">// 右边框</span>    &#125;,    <span class="hljs-attr">fill</span>:&#123;<span class="hljs-comment">//单元格背景颜色，在excel中叫 填充所以叫fill(猜的)</span>    <span class="hljs-attr">fgColor</span>:&#123;<span class="hljs-comment">//背景颜色</span>    <span class="hljs-attr">rgb</span>:<span class="hljs-string">&#x27;#FFFFFF&#x27;</span>    &#125;&#125;&#125;&#125;</code></pre></div><p>更多参数可以查看 sheetjs 的<a href="https://docs.sheetjs.com/docs/csf/cell">单元格类型文档</a></p><p>xlsx-js-style 的 npm 地址<a href="https://www.npmjs.com/package/xlsx-js-style">xlsx-js-style</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>sheetjs</tag>
      
      <tag>xlsx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vlmcsd 部署</title>
    <link href="/2024/04/24/%E3%80%90vlmcsd%E3%80%91%E9%83%A8%E7%BD%B2/"/>
    <url>/2024/04/24/%E3%80%90vlmcsd%E3%80%91%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="在-Debian-中部署"><a href="#在-Debian-中部署" class="headerlink" title="在 Debian 中部署"></a>在 Debian 中部署</h3><h4 id="1、首先从-Github-中下载构建好的二进制文件"><a href="#1、首先从-Github-中下载构建好的二进制文件" class="headerlink" title="1、首先从 Github 中下载构建好的二进制文件"></a>1、首先从 Github 中下载构建好的二进制文件</h4><p><a href="https://github.com/Wind4/vlmcsd">https://github.com/Wind4/vlmcsd</a></p><h4 id="2、在目录中找到适合运行环境的文件"><a href="#2、在目录中找到适合运行环境的文件" class="headerlink" title="2、在目录中找到适合运行环境的文件"></a>2、在目录中找到适合运行环境的文件</h4><div class="code-wrapper"><pre><code class="hljs moonscript">例如：\binaries\binaries\Linux\intel\static\vlmcsd-x64-musl-static</code></pre></div><h4 id="3、通过-SFTP-上传到-Debian-的目录中，再复制到合适的位置"><a href="#3、通过-SFTP-上传到-Debian-的目录中，再复制到合适的位置" class="headerlink" title="3、通过 SFTP 上传到 Debian 的目录中，再复制到合适的位置"></a>3、通过 SFTP 上传到 Debian 的目录中，再复制到合适的位置</h4><div class="code-wrapper"><pre><code class="hljs gradle">cp <span class="hljs-regexp">/temp/</span>vlmcsd-x64-musl-<span class="hljs-keyword">static</span> <span class="hljs-regexp">/mnt/</span>vlmscd/</code></pre></div><h4 id="4、给文件添加可执行权限"><a href="#4、给文件添加可执行权限" class="headerlink" title="4、给文件添加可执行权限"></a>4、给文件添加可执行权限</h4><div class="code-wrapper"><pre><code class="hljs gradle">chmod <span class="hljs-number">755</span> <span class="hljs-regexp">/mnt/</span>vlmscd/vlmcsd-x64-musl-<span class="hljs-keyword">static</span></code></pre></div><h4 id="5、创建系统服务配置"><a href="#5、创建系统服务配置" class="headerlink" title="5、创建系统服务配置"></a>5、创建系统服务配置</h4><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 新建一个文件 vlmcsd.service[Unit]Description=kms激活服务After=network.target[Service]Type=forkingPIDFile=<span class="hljs-regexp">/var/</span>run/vlmcsd.pidExecStart=<span class="hljs-regexp">/mnt/</span>vlmcsd<span class="hljs-regexp">/vlmcsd-x64-musl-static -p /</span>var<span class="hljs-regexp">/run/</span>vlmcsd.pidExecStop=<span class="hljs-regexp">/bin/</span>kill -HUP <span class="hljs-variable">$MAINPID</span>PrivateTmp=true[Install]WantedBy=multi-user.target</code></pre></div><h4 id="6、复制文件到-systemctl-的配置文件目录下"><a href="#6、复制文件到-systemctl-的配置文件目录下" class="headerlink" title="6、复制文件到 systemctl 的配置文件目录下"></a>6、复制文件到 systemctl 的配置文件目录下</h4><div class="code-wrapper"><pre><code class="hljs awk">cp <span class="hljs-regexp">/mnt/</span>vlmcsd.service <span class="hljs-regexp">/lit/</span>systemd<span class="hljs-regexp">/system/</span></code></pre></div><h4 id="7、重新加载一下-systemctl-并启动服务"><a href="#7、重新加载一下-systemctl-并启动服务" class="headerlink" title="7、重新加载一下 systemctl,并启动服务"></a>7、重新加载一下 systemctl,并启动服务</h4><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 重新加载systemctlsystemctl daemon-reload<span class="hljs-regexp">//</span> 启动vlmcsdsystemctl start vlmcsd.service</code></pre></div><h4 id="8、其他"><a href="#8、其他" class="headerlink" title="8、其他"></a>8、其他</h4><p>记得打开防火墙端口，默认 1688</p>]]></content>
    
    
    
    <tags>
      
      <tag>kms</tag>
      
      <tag>windows</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发中端口号乱跳</title>
    <link href="/2023/10/26/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B9%B1%E8%B7%B3/"/>
    <url>/2023/10/26/%E5%BC%80%E5%8F%91%E4%B8%AD%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B9%B1%E8%B7%B3/</url>
    
    <content type="html"><![CDATA[<h3 id="一、情况概述"><a href="#一、情况概述" class="headerlink" title="一、情况概述"></a>一、情况概述</h3><p>使用 windows 11 开发，在偶然的情况下会出现 1888、8080、8000 端口被占用，导致项目启动到别的端口号上，甚至每次启动都不一样</p><p>当这个情况出现后，可能重启一次能解决问题，可能一直重启都无法解决问题，并且使用</p><div class="code-wrapper"><pre><code class="hljs shell">netstat -ano | findstr [端口号]</code></pre></div><p>也无法找到占用端口的程序，但是项目无法正确的在 1888 上启动</p><h3 id="二、造成这种情况的原因"><a href="#二、造成这种情况的原因" class="headerlink" title="二、造成这种情况的原因"></a>二、造成这种情况的原因</h3><p>1、windows 里有一个功能叫 &lt; TCP 动态端口范围 &gt;，在这个范围里的端口会被一些服务占用</p><ul><li><p>Windows Vista（或 Windows Server 2008）之前，动态端口范围是 1025 到 5000</p></li><li><p>在 Windows Vista（或 Windows Server 2008）之后，默认起始端口为 49152，默认结束端口为 65535</p></li></ul><p>2、如果安装了 Hyper-V，那么 Hyper-V 会为容器宿主网络服务（Windows Container Host Networking Service）随机保留一些端口号使用</p><p>旧的 windows 为了遵守 Internet 分配号码颁发机构 (IANA) 建议，把端口从 1025-5000 改到了 49152-65535</p><p>在一些情况下 windows 自动更新会把起始端口号设置为 1025，那么 1888、8000 等端口就不能使用了，所以会出现项目启动端口乱跳</p><h3 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h3><p>使用：</p><div class="code-wrapper"><pre><code class="hljs powershell">netsh int ipv4 show dynamicport tcp</code></pre></div><p>可以查看当前系统中为&lt; TCP 动态端口&gt;分配的端口范围</p><p>使用：</p><div class="code-wrapper"><pre><code class="hljs powershell">netsh int ipv4 show excludedportrange protocol=tcp</code></pre></div><p>可以查看被征用的端口范围，如果发现要使用的端口在这个范围内，则会出现端口号乱跑的情况</p><p>1、解决方案：排除指定的端口，让系统不占用指定的端口</p><div class="code-wrapper"><pre><code class="hljs powershell">netsh int ipv4 add excludedportrange  protocol=tcp startport=<span class="hljs-number">1888</span> numberofports=<span class="hljs-number">10</span></code></pre></div><p>— 这里 1888 为开始的端口，10 的意思为 1888 - 1898 这 10 个端口全都要移出保留端口，如果只想 8081 不作为端口，那么 10 可以改成 1</p><p>2、修改&lt; TCP 动态端口&gt;的范围，把常用的端口划出去，或者划分不常用的端口留给系统使用</p><div class="code-wrapper"><pre><code class="hljs powershell">netsh int ipv4 <span class="hljs-built_in">set</span> dynamic tcp <span class="hljs-built_in">start</span>=<span class="hljs-number">49152</span> num=<span class="hljs-number">16384</span>netsh int ipv6 <span class="hljs-built_in">set</span> dynamic tcp <span class="hljs-built_in">start</span>=<span class="hljs-number">49152</span> num=<span class="hljs-number">16384</span></code></pre></div><p>— 从 49152 开始的 16384 个端口，也就是 49152-65535，提供给&lt;TCP 动态端口&gt;服务</p><p>3、重启电脑，就可以正常使用端口了</p><h3 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h3><p><a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-server/networking/reserve-a-range-of-ephemeral-ports">保留一系列临时端口 - Windows Server | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/zh-CN/troubleshoot/windows-server/networking/default-dynamic-port-range-tcpip-chang">Windows Vista 和 Windows Server 2008 中 TCP&#x2F;IP 的默认动态端口范围已更改 - Windows Server | Microsoft Learn</a></p><p><a href="https://blog.csdn.net/weter_drop/article/details/129786201">一文解决 windows 电脑端口被占用问题，专治疑难杂症和 port xxxx was already in use 说再见_windows 端口被占用怎么解决_T-OPEN 的博客-CSDN 博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>vue</tag>
      
      <tag>nodejs</tag>
      
      <tag>react</tag>
      
      <tag>vite</tag>
      
      <tag>port</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sheetjs导入和导出</title>
    <link href="/2023/10/12/sheetjs%E5%AF%BC%E5%85%A5%E5%92%8C%E5%AF%BC%E5%87%BA/"/>
    <url>/2023/10/12/sheetjs%E5%AF%BC%E5%85%A5%E5%92%8C%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="一、引入-xlsx-包"><a href="#一、引入-xlsx-包" class="headerlink" title="一、引入 xlsx 包"></a>一、引入 xlsx 包</h3><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; utils, writeFile, read &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xlsx&quot;</span>;</code></pre></div><h3 id="二、读取一个文件"><a href="#二、读取一个文件" class="headerlink" title="二、读取一个文件"></a>二、读取一个文件</h3><h4 id="1、通过传统的方式读取文件"><a href="#1、通过传统的方式读取文件" class="headerlink" title="1、通过传统的方式读取文件"></a>1、通过传统的方式读取文件</h4><p>兼容性比较好的方式，创建一个 type 为 file 的元素然后点击它</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> inputDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;input&quot;</span>);inputDom.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;file&quot;</span>);inputDom.<span class="hljs-property">onchange</span> = <span class="hljs-keyword">async</span> () =&gt; &#123;  <span class="hljs-comment">//TODO 操作文件</span>  <span class="hljs-keyword">const</span> file = <span class="hljs-keyword">await</span> inputDom.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">arrayBuffer</span>();  <span class="hljs-keyword">const</span> worksheet = workbook.<span class="hljs-property">Sheets</span>[workbook.<span class="hljs-property">SheetNames</span>[<span class="hljs-number">0</span>]];  <span class="hljs-keyword">const</span> raw_data = utils.<span class="hljs-title function_">sheet_to_json</span>(worksheet, &#123; <span class="hljs-attr">header</span>: <span class="hljs-number">1</span> &#125;);&#125;;inputDom.<span class="hljs-title function_">click</span>();</code></pre></div><h4 id="2、通过比较新的-api"><a href="#2、通过比较新的-api" class="headerlink" title="2、通过比较新的 api"></a>2、通过比较新的 api</h4><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fileList = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">showOpenFilePicker</span>(); <span class="hljs-comment">//默认会返回一个list</span><span class="hljs-keyword">const</span> file = <span class="hljs-keyword">await</span> fileList[<span class="hljs-number">0</span>].<span class="hljs-title function_">getFile</span>(); <span class="hljs-comment">//单选文件所以选择第一个</span><span class="hljs-keyword">const</span> arrB = <span class="hljs-keyword">await</span> file.<span class="hljs-title class_">ArrayBuffer</span>(); <span class="hljs-comment">//sheetjs支持arrayBuffer格式的数据</span><span class="hljs-keyword">const</span> workbook = <span class="hljs-title function_">read</span>(arrB); <span class="hljs-comment">//调用sheetjs的read方法，读取数据</span><span class="hljs-keyword">const</span> worksheet = workbook.<span class="hljs-property">Sheets</span>[workbook.<span class="hljs-property">SheetNames</span>[<span class="hljs-number">0</span>]]; <span class="hljs-comment">//获取到第一张表的数据</span><span class="hljs-keyword">const</span> data = utils.<span class="hljs-title function_">sheet_to_json</span>(worksheet, &#123; <span class="hljs-attr">header</span>: <span class="hljs-number">1</span> &#125;); <span class="hljs-comment">//通过utils中的sheet_to_json方法转换成json</span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/showOpenFilePicker">Window：showOpenFilePicker() 方法 - Web API 接口参考 | MDN</a></p><h3 id="三、导出数据"><a href="#三、导出数据" class="headerlink" title="三、导出数据"></a>三、导出数据</h3><h4 id="1、可以通过页面中-table-元素导出"><a href="#1、可以通过页面中-table-元素导出" class="headerlink" title="1、可以通过页面中 table 元素导出"></a>1、可以通过页面中 table 元素导出</h4><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> wb = utils.<span class="hljs-title function_">table_to_book</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#el-table-result&quot;</span>));<span class="hljs-title function_">writeFile</span>(wb, <span class="hljs-string">&quot;文件的名字需要带后缀.xlsx&quot;</span>);</code></pre></div><p>这种方式一些缺点:<br>1、如果是表格中使用了输入框，则导出的表格中没有输入框中的数据<br>2、如果表格中使用了无关元素，则导出的表格中会夹带元素上的文字</p><h4 id="2、通过-json-对象数组导出"><a href="#2、通过-json-对象数组导出" class="headerlink" title="2、通过 json 对象数组导出"></a>2、通过 json 对象数组导出</h4><p>通常情况下，表格的数据格式类似这种</p><div class="code-wrapper"><pre><code class="hljs js">[  &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,    <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;翻斗花园二号楼1001室&quot;</span>,  &#125;,  &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span>,    <span class="hljs-attr">age</span>: <span class="hljs-number">11</span>,    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;女&quot;</span>,    <span class="hljs-attr">address</span>: <span class="hljs-string">&quot;翻斗花园二号楼1002室&quot;</span>,  &#125;,];</code></pre></div><p>导出时需要转化为这种样式</p><div class="code-wrapper"><pre><code class="hljs js">[  &#123;    姓名: <span class="hljs-string">&quot;张三&quot;</span>,    年龄: <span class="hljs-number">10</span>,    性别: <span class="hljs-string">&quot;男&quot;</span>,    地址: <span class="hljs-string">&quot;翻斗花园二号楼1001室&quot;</span>,  &#125;,  &#123;    姓名: <span class="hljs-string">&quot;李四&quot;</span>,    年龄: <span class="hljs-number">11</span>,    性别: <span class="hljs-string">&quot;女&quot;</span>,    地址: <span class="hljs-string">&quot;翻斗花园二号楼1002室&quot;</span>,  &#125;,];</code></pre></div><p>在 sheet 中默认会使用对象的 key 做表格的表头，整理成这种数据可以更直观</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = [&#123; xxxx &#125;];<span class="hljs-keyword">const</span> ws = utils.<span class="hljs-title function_">json_to_sheet</span>(data);<span class="hljs-keyword">const</span> wb = utils.<span class="hljs-title function_">book_new</span>();utils.<span class="hljs-title function_">book_append_sheet</span>(wb, ws, <span class="hljs-string">&quot;第三个参数是工作簿的名称，可选&quot;</span>);<span class="hljs-title function_">writeFile</span>(wb, <span class="hljs-string">&quot;文件的名字需要带后缀.xlsx&quot;</span>); <span class="hljs-comment">//运行到这一行代码浏览器即可提示下载</span></code></pre></div><h4 id="3、通过-json-数组导出"><a href="#3、通过-json-数组导出" class="headerlink" title="3、通过 json 数组导出"></a>3、通过 json 数组导出</h4><p>这种导出方式要求数据为一个二维数组，像一张表格平铺</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = [  [<span class="hljs-string">&quot;姓名&quot;</span>, <span class="hljs-string">&quot;年龄&quot;</span>, <span class="hljs-string">&quot;性别&quot;</span>, <span class="hljs-string">&quot;地址&quot;</span>],  [<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;翻斗花园二号楼1001室&quot;</span>],  [<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">11</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-string">&quot;翻斗花园二号楼1002室&quot;</span>],];</code></pre></div><p>然后将数组导出</p><div class="code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ws = utils.<span class="hljs-title function_">aoa_to_sheet</span>(data);<span class="hljs-keyword">const</span> wb = utils.<span class="hljs-title function_">book_new</span>();utils.<span class="hljs-title function_">book_append_sheet</span>(wb, ws, <span class="hljs-string">&quot;第三个参数是工作簿的名称，可选&quot;</span>);<span class="hljs-title function_">writeFile</span>(wb, <span class="hljs-string">&quot;文件的名字需要带后缀.xlsx&quot;</span>);</code></pre></div><h3 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h3><p>导出教程：<a href="https://docs.sheetjs.com/docs/getting-started/examples/export">https://docs.sheetjs.com/docs/getting-started/examples/export</a></p><p>导入教程：<a href="https://docs.sheetjs.com/docs/getting-started/examples/import">https://docs.sheetjs.com/docs/getting-started/examples/import</a></p><p>api 参考：<a href="https://docs.sheetjs.com/docs/api/">https://docs.sheetjs.com/docs/api/</a></p><div class="code-wrapper"><pre><code class="hljs"></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>sheetjs</tag>
      
      <tag>xlsx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>amd显卡光标变白</title>
    <link href="/2023/04/09/amd%E6%98%BE%E5%8D%A1%E5%85%89%E6%A0%87%E5%8F%98%E7%99%BD/"/>
    <url>/2023/04/09/amd%E6%98%BE%E5%8D%A1%E5%85%89%E6%A0%87%E5%8F%98%E7%99%BD/</url>
    
    <content type="html"><![CDATA[<p>如果使用了 amd 的 GPU 包括 apu，独立显卡，会出现鼠标移动到浏览器地址栏光标变白色的问题，会有一个时刻找不到光标位置，但是在截图和录屏中是正常的 <br>解决方案：</p><h4 id="一、更换-windows-光标样式"><a href="#一、更换-windows-光标样式" class="headerlink" title="一、更换 windows 光标样式"></a>一、更换 windows 光标样式</h4><div class="code-wrapper"><pre><code class="hljs">通过win+i打开设置面板，在左侧找到设备-鼠标，进入到鼠标设置后在右侧蓝色文字 “其他鼠标选项”，弹出鼠标属性窗口，切换到指针tab页，更换文本选择的指针样式。</code></pre></div><h4 id="二、在关闭硬件加速"><a href="#二、在关闭硬件加速" class="headerlink" title="二、在关闭硬件加速"></a>二、在关闭硬件加速</h4><div class="code-wrapper"><pre><code class="hljs">在浏览器、office中设置关闭硬件加速会解决此问题，但是失去硬件加速在吃gpu的任务中cpu会负载比较高且卡顿</code></pre></div><h4 id="三、修改注册表（联想高级售后经理火锅酱提供）"><a href="#三、修改注册表（联想高级售后经理火锅酱提供）" class="headerlink" title="三、修改注册表（联想高级售后经理火锅酱提供）"></a>三、修改注册表（联想高级售后经理火锅酱提供）</h4><p>在桌面创建空白文件后缀改为.reg 写入以下代码：</p><div class="code-wrapper"><pre><code class="hljs moonscript"> Windows Registry Editor Version <span class="hljs-number">5.00</span>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Dwm]<span class="hljs-string">&quot;OverlayTestMode&quot;</span>=<span class="hljs-name">dword</span>:<span class="hljs-number">00000005</span></code></pre></div><p>如果出现问题要恢复注册表则写入以下代码：</p><div class="code-wrapper"><pre><code class="hljs moonscript">Windows Registry Editor Version <span class="hljs-number">5.00</span>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Dwm]<span class="hljs-string">&quot;OverlayTestMode&quot;</span>=-</code></pre></div><p>注册表修改后需要重启才能生效 <br>相关参考 <br><a href="https://www.bilibili.com/read/cv20029000">https://www.bilibili.com/read/cv20029000</a> <br><a href="https://www.reddit.com/r/chrome/comments/x4za4o/white_cursor_bug/">https://www.reddit.com/r/chrome/comments/x4za4o/white_cursor_bug/</a> <br><a href="https://www.zhihu.com/question/308547822/answer/2511480647">https://www.zhihu.com/question/308547822/answer/2511480647</a> \</p>]]></content>
    
    
    
    <tags>
      
      <tag>AMD</tag>
      
      <tag>openGl</tag>
      
      <tag>win</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鼠标移入方向的解决方式</title>
    <link href="/2023/03/12/%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%85%A5%E6%96%B9%E5%90%91%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/"/>
    <url>/2023/03/12/%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%85%A5%E6%96%B9%E5%90%91%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>先看一个效果 <br> <img src="https://oss.wangyuan.cool/blog/screenshots.gif" alt="效果展示"> <br>很简单，通过鼠标移入方向的不同做一些操作，在这个例子中只讨论实现判断鼠标移入方向的方式</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p><img src="https://oss.wangyuan.cool/blog/zhuobiaoxi.jpg" alt="坐标系"> <br>例如在这个蓝色方框中，通过对角线分割四个单独的三角形，我们在三角形的焦点建立一个坐标系，在这个方框中对于当前坐标系来说，我们只要计算出来方框中某一个点在坐标系中的位置到原点的连接线相对于 x 轴正轴方向的角度就可以判断出点在方框中的位置。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-comment">//  获取元素</span><span class="hljs-type">const</span> container = <span class="hljs-built_in">ref</span>();<span class="hljs-type">const</span> mainFun = () =&gt; &#123;  <span class="hljs-comment">//得到指定元素的宽高数据</span>  let rect = container.value.<span class="hljs-built_in">getBoundingClientRect</span>();  <span class="hljs-comment">//通过元素的宽和高计算出∠θ的反正切，也就是计算出右侧三角形的分界弧度</span>  <span class="hljs-type">const</span> theta = Math.<span class="hljs-built_in">atan</span>(rect.height / rect.width);  <span class="hljs-comment">//给元素添加鼠标移入时间</span>  container.value.<span class="hljs-built_in">addEventListener</span>(<span class="hljs-string">&quot;mouseenter&quot;</span>, (e) =&gt; &#123;    <span class="hljs-comment">// 得到鼠标移入时在坐标系中对应的x轴的值</span>    <span class="hljs-type">const</span> x = e.offsetX - rect.width / <span class="hljs-number">2</span>;    <span class="hljs-comment">// 得到鼠标移入时在坐标系中对应的y轴的值</span>    <span class="hljs-type">const</span> y = rect.height / <span class="hljs-number">2</span> - e.offsetY;    <span class="hljs-comment">// math.atan2是js提供的方法，返回正x轴到从(0,0)点到(x,y)点之间的平面角度，计算出鼠标移入时的坐标点到x正轴的角度，</span>    <span class="hljs-type">const</span> d = Math.<span class="hljs-built_in">atan2</span>(y, x);    let dire;    <span class="hljs-comment">// 通过角度判断是从哪个方向移入的</span>    <span class="hljs-keyword">if</span> (d &lt; theta &amp;&amp; d &gt;= -theta) &#123;      dire = <span class="hljs-string">&quot;right&quot;</span>;    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d &gt;= theta &amp;&amp; d &lt; Math.PI - theta) &#123;      dire = <span class="hljs-string">&quot;up&quot;</span>;    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d &lt; -theta &amp;&amp; d &gt;= theta - Math.PI) &#123;      dire = <span class="hljs-string">&quot;down&quot;</span>;    &#125; <span class="hljs-keyword">else</span> &#123;      dire = <span class="hljs-string">&quot;left&quot;</span>;    &#125;    <span class="hljs-comment">//通过添加类名改变元素的动画效果和移入效果</span>    container.value.classList.<span class="hljs-built_in">add</span>(dire);  &#125;);  <span class="hljs-comment">//移出鼠标时还原类名</span>  container.value.<span class="hljs-built_in">addEventListener</span>(<span class="hljs-string">&quot;mouseleave&quot;</span>, () =&gt; &#123;    container.value.className = <span class="hljs-string">&quot;mouse-entry-direction-body&quot;</span>;  &#125;);&#125;;</code></pre></div><h3 id="over"><a href="#over" class="headerlink" title="over"></a>over</h3><p>通过在 container 上覆盖三角元素的方法也可以解决这个问题，但是会增加不必要的 html 元素，并且如果需要在元素中有更多操作时更复杂。</p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>animation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BEM命名管理样式</title>
    <link href="/2023/02/25/BEM%E5%91%BD%E5%90%8D%E7%AE%A1%E7%90%86%E6%A0%B7%E5%BC%8F/"/>
    <url>/2023/02/25/BEM%E5%91%BD%E5%90%8D%E7%AE%A1%E7%90%86%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>做 VUE 开发最常使用的就是 elementUI&#x2F;elementPlus，使用中发现 element 的元素类名起的非常规整，结合自己开发中的困难(指不知道怎么起类名)，看一下如何优雅的使用 BEM 命名</p><h3 id="BEM-介绍"><a href="#BEM-介绍" class="headerlink" title="BEM 介绍"></a>BEM 介绍</h3><p>BEM 是一种针对 CSS 的命名规范的简称，B&#x2F;E&#x2F;M 分别代表，块(Block)，元素(Element)，修饰符(Modifier)的简写。<br>以 elementPlus 举例：</p><ul><li>块(Block)：可以理解为一个模块或者一个组件，块是规范中最大的单位，块之间是相互独立的，块之间不能相互影响。比如组件 el-table,el-dialog,el-form 等等。</li><li>元素(Element)：可以理解为一个块(Block)中的元素，它是依赖上下文的，它被块(Block)包裹，但是每个元素(Element)之间也是相互独立的，它主要用来描述当前元素是什么。比如单选框 el-radio 中的 input 的那个点和单选框中的文字部分，el-dialog 中的 header,footer 等等。</li><li>修饰符(Modifier)：可以理解为对元素或者块的修饰,所以它不能单独出现，必须要跟随块(Block)或者元素(Element)使用。比如按钮的 success 状态 el-button–success，alert 组件 success 状态的 el-alert–success<br/></li></ul><p>块(Block)元素(Element)修饰符(Modifier)之间的书写规范为</p><div class="code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-title">.block&#123;&#125;</span><span class="hljs-title">.block__element&#123;&#125;</span><span class="hljs-title">.block--modifier&#123;&#125;</span><span class="hljs-title">.block__element--modifier&#123;&#125;</span></code></pre></div><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 按钮 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-button el-button--primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-comment">&lt;!-- dialog --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-dialog&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-dialog__header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-dialog__body&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-dialog__footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><p><font color='red'>！注意在使用中一个项目中块(Block)的命名应该是唯一的</font></p><h3 id="什么时候使用-BEM"><a href="#什么时候使用-BEM" class="headerlink" title="什么时候使用 BEM"></a>什么时候使用 BEM</h3><p>当我们使用 BEM 方法命名时，我们要知道哪些东西是应该使用 BEM 格式的。只有当需要明确关联性的模块关系时，才需要使用 BEM 格式。</p><h3 id="使用混合拆分样式"><a href="#使用混合拆分样式" class="headerlink" title="使用混合拆分样式"></a>使用混合拆分样式</h3><p>在 BEM 中，位置和布局样式通过父级块来进行设置。这就需要通过混合组合块与元素，组合多个实体（块、元素、修饰符都被称作 BEM 实体）的表现与样式，同时不耦合代码。</p><p>示例：</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- top 块 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- search-form块混合top块的search-form元素 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-form top__search-form&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><p>这样就通过混合的方式把位置样式从块中剥离了，可以在.top__search-form 中设置表单的位置或浮动等样式，保持了 search-form 块的样式独立，对其完整样式代码进行了解耦。在传统的命名方式中，我们经常通过嵌套的方式，如.top .search-form 来对局部样式进行调整。但是这样做会改变选择器的权重。<font color='red'>在 BEM 的思想中，保持选择器扁平和低权重是一个准则。</font></p><p>因此在使用 BEM 命名时需要格外注意遵循它的工作方式：</p><ul><li>不在块里设置位置、布局相关的样式，只设置基本样式。</li><li>通过混合的方式，在作为父级块的元素时设置布局样式。</li><li>适时拆分元素为独立的块，解耦样式并形成新的命名空间。</li></ul><h3 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h3><p>开放封闭原则是所有面向对象原则的核心，是说软件实体应该是可扩展，而不可修改的。即对扩展是开放的，而对修改是封闭的。如果将这个原则应用到 BEM 的使用上，就是说我们应该使用 modifier 去拓展 block 或 element 的样式，而不应该去修改 block 或 element 的基础样式。</p><ul><li><p>例如有两个按钮，如下所示：</p><div class="code-wrapper"><pre><code class="hljs stylus">&lt;div&gt;    &lt;<span class="hljs-selector-tag">button</span> class=<span class="hljs-string">&quot;btn&quot;</span>&gt;正确&lt;/button&gt;    &lt;<span class="hljs-selector-tag">button</span> class=<span class="hljs-string">&quot;btn&quot;</span>&gt;错误&lt;/button&gt;&lt;/div&gt;.btn&#123;    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>;    <span class="hljs-attribute">color</span>:white;    <span class="hljs-attribute">border</span>:none;    <span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span> <span class="hljs-number">8px</span>;    <span class="hljs-attribute">display</span>: inline-block;    <span class="hljs-attribute">background-color</span>:green;&#125;</code></pre></div><p>如果要将名为错误的按钮的背景颜色改为红色，我们需要给.btn 加一个 modifier，而不是直接去修改.btn 的样式：</p><div class="code-wrapper"><pre><code class="hljs maxima">&lt;div&gt;    &lt;button class=<span class="hljs-string">&quot;btn&quot;</span>&gt;正确&lt;/button&gt;    &lt;button class=<span class="hljs-string">&quot;btn btn--error&quot;</span>&gt;错误&lt;/button&gt;&lt;/div&gt;.btn&#123;    <span class="hljs-built_in">font</span>-size:16px;    <span class="hljs-built_in">color</span>:white;    <span class="hljs-built_in">border</span>:none;    padding:10px 8px;    <span class="hljs-built_in">display</span>: inline-<span class="hljs-built_in">block</span>;    <span class="hljs-built_in">background</span>-<span class="hljs-built_in">color</span>:green;&#125;.btn--<span class="hljs-built_in">error</span>&#123;    <span class="hljs-built_in">background</span>-<span class="hljs-built_in">color</span>:red;&#125;</code></pre></div></li></ul><h3 id="具体使用方法"><a href="#具体使用方法" class="headerlink" title="具体使用方法"></a>具体使用方法</h3><h4 id="useNameSpace"><a href="#useNameSpace" class="headerlink" title="useNameSpace"></a>useNameSpace</h4><p>element 中使用了 useNameSpace 的工具方法，每个块(Block)也就是 el-table&#x2F;el-form 这些是一个命名空间</p><ul><li><p>先准备需要的参数</p><div class="code-wrapper"><pre><code class="hljs pf">// 定义一个组件的命名前缀，element中是‘el’<span class="hljs-keyword">const</span> <span class="hljs-keyword">default</span>Namespace = &#x27;el&#x27;// 再定义一个描述组件状态的变量，例如：is-active<span class="hljs-keyword">const</span> <span class="hljs-keyword">state</span>Prefix = &#x27;is-&#x27;</code></pre></div></li><li><p>再定义一个 bem 方法返回符合规范的类名</p><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">_bem</span> = (<span class="hljs-params"></span><span class="hljs-params"> <span class="hljs-keyword">namespace</span>: <span class="hljs-built_in">string</span>,</span><span class="hljs-params"> block: <span class="hljs-built_in">string</span>,</span><span class="hljs-params"> blockSuffix: <span class="hljs-built_in">string</span>,</span><span class="hljs-params"> element: <span class="hljs-built_in">string</span>,</span><span class="hljs-params"> modifier: <span class="hljs-built_in">string</span>,</span><span class="hljs-params"></span>) =&gt; &#123; <span class="hljs-keyword">let</span> cls = <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-keyword">namespace</span>&#125;</span>-<span class="hljs-subst">$&#123;block&#125;</span>`</span> <span class="hljs-keyword">if</span> (blockSuffix)   cls += <span class="hljs-string">`-<span class="hljs-subst">$&#123;blockSuffix&#125;</span>`</span>​ <span class="hljs-keyword">if</span> (element)   cls += <span class="hljs-string">`__<span class="hljs-subst">$&#123;element&#125;</span>`</span>​ <span class="hljs-keyword">if</span> (modifier)   cls += <span class="hljs-string">`--<span class="hljs-subst">$&#123;modifier&#125;</span>`</span>​ <span class="hljs-keyword">return</span> cls&#125;</code></pre></div></li><li><p>最后定义一个 useNameSpace 方法，返回 BEM 方法，用来判断补全</p><div class="code-wrapper"><pre><code class="hljs moonscript"><span class="hljs-keyword">export</span> const  useNamespace = <span class="hljs-function"><span class="hljs-params">(block: <span class="hljs-built_in">string</span>)</span> =&gt;</span> &#123; const namespace = computed(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> defaultNamespace) const b = <span class="hljs-function"><span class="hljs-params">(blockSuffix = <span class="hljs-string">&#x27;&#x27;</span>)</span> =&gt;</span>   _bem(unref(namespace), block, blockSuffix, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) const e = <span class="hljs-function"><span class="hljs-params">(element?: <span class="hljs-built_in">string</span>)</span> =&gt;</span>   element ? _bem(unref(namespace), block, <span class="hljs-string">&#x27;&#x27;</span>, element, <span class="hljs-string">&#x27;&#x27;</span>) : <span class="hljs-string">&#x27;&#x27;</span> const m = <span class="hljs-function"><span class="hljs-params">(modifier?: <span class="hljs-built_in">string</span>)</span> =&gt;</span>   modifier ? _bem(unref(namespace), block, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, modifier) : <span class="hljs-string">&#x27;&#x27;</span> const be = <span class="hljs-function"><span class="hljs-params">(blockSuffix?: <span class="hljs-built_in">string</span>, element?: <span class="hljs-built_in">string</span>)</span> =&gt;</span>   blockSuffix &amp;&amp; element     ? _bem(unref(namespace), block, blockSuffix, element, <span class="hljs-string">&#x27;&#x27;</span>)     : <span class="hljs-string">&#x27;&#x27;</span> const em = <span class="hljs-function"><span class="hljs-params">(element?: <span class="hljs-built_in">string</span>, modifier?: <span class="hljs-built_in">string</span>)</span> =&gt;</span>   element &amp;&amp; modifier     ? _bem(unref(namespace), block, <span class="hljs-string">&#x27;&#x27;</span>, element, modifier)     : <span class="hljs-string">&#x27;&#x27;</span> const bm = <span class="hljs-function"><span class="hljs-params">(blockSuffix?: <span class="hljs-built_in">string</span>, modifier?: <span class="hljs-built_in">string</span>)</span> =&gt;</span>   blockSuffix &amp;&amp; modifier     ? _bem(unref(namespace), block, blockSuffix, <span class="hljs-string">&#x27;&#x27;</span>, modifier)     : <span class="hljs-string">&#x27;&#x27;</span> const bem = <span class="hljs-function"><span class="hljs-params">(blockSuffix?: <span class="hljs-built_in">string</span>, element?: <span class="hljs-built_in">string</span>, modifier?: <span class="hljs-built_in">string</span>)</span> =&gt;</span>   blockSuffix &amp;&amp; element &amp;&amp; modifier     ? _bem(unref(namespace), block, blockSuffix, element, modifier)     : <span class="hljs-string">&#x27;&#x27;</span>// 这个是is-active这种状态描述的方法 const <span class="hljs-name">is</span>: &#123;   (<span class="hljs-name">name</span>: <span class="hljs-built_in">string</span>, <span class="hljs-name">state</span>: boolean | undefined): <span class="hljs-built_in">string</span>   (<span class="hljs-name">name</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span>&#125; = <span class="hljs-function"><span class="hljs-params">(name: <span class="hljs-built_in">string</span>, ...args: [boolean | undefined] | [])</span> =&gt;</span> &#123;   const state = args.length &gt;= <span class="hljs-number">1</span> ? args[<span class="hljs-number">0</span>]! : <span class="hljs-literal">true</span>   <span class="hljs-keyword">return</span> name &amp;&amp; state ? `$&#123;statePrefix&#125;$&#123;name&#125;` : <span class="hljs-string">&#x27;&#x27;</span>&#125; <span class="hljs-keyword">return</span> &#123;   namespace,   b,   e,   m,   be,   em,   bm,   bem,   is,&#125;&#125;</code></pre></div><h4 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h4><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 例如开发到了dialog组件，在script中先定义命名空间，在html中直接使用即可import &#123; useNamespace &#125; from <span class="hljs-string">&#x27;./compo/useNamespace&#x27;</span>const bs = useNamespace(<span class="hljs-string">&#x27;dialog&#x27;</span>)ns.b() <span class="hljs-regexp">//</span> el-dialogns.b(<span class="hljs-string">&#x27;overlay&#x27;</span>) <span class="hljs-regexp">//</span> el-dialog-overlayns.e(<span class="hljs-string">&#x27;header&#x27;</span>) <span class="hljs-regexp">//</span> el-dialog__headerns.m(<span class="hljs-string">&#x27;theme-dark&#x27;</span>) <span class="hljs-regexp">//</span> el-dialog--theme-darkns.be(<span class="hljs-string">&#x27;header&#x27;</span>,<span class="hljs-string">&#x27;close&#x27;</span>) <span class="hljs-regexp">//</span> el-dialog-header__closens.em(<span class="hljs-string">&#x27;footer&#x27;</span>,<span class="hljs-string">&#x27;small&#x27;</span>) <span class="hljs-regexp">//</span> el-dialog__footer--smallns.bm(<span class="hljs-string">&#x27;footer&#x27;</span>,<span class="hljs-string">&#x27;small&#x27;</span>) <span class="hljs-regexp">//</span> el-dialog-footer--smallns.bem(<span class="hljs-string">&#x27;footer&#x27;</span>,<span class="hljs-string">&#x27;btn&#x27;</span>,<span class="hljs-string">&#x27;primary&#x27;</span>) <span class="hljs-regexp">//</span> el-dialog-footer__btn--primaryns.is(<span class="hljs-string">&#x27;closeable&#x27;</span>) <span class="hljs-regexp">//</span> is-closeable</code></pre></div></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>另外 element 还使用了 sass 的 mixins 功能为 css 样式提供了具体使用，&#x2F;element-plus&#x2F;packages&#x2F;theme-chalk&#x2F;src&#x2F;mixins</p>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>element</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css_clip-path</title>
    <link href="/2022/12/12/css-clip-path/"/>
    <url>/2022/12/12/css-clip-path/</url>
    
    <content type="html"><![CDATA[<h3 id="clip-path"><a href="#clip-path" class="headerlink" title="clip-path"></a>clip-path</h3><p> “clip-path的作用是使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。”</p><div class="code-wrapper"><pre><code class="hljs css"> 直接写在选择器中：<span class="hljs-selector-tag">div</span>&#123;    <span class="hljs-attribute">width</span>:<span class="hljs-number">50px</span>;    <span class="hljs-attribute">height</span>:<span class="hljs-number">50px</span>;    <span class="hljs-attribute">clip-path</span>:xxxxx;&#125;</code></pre></div><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>clip-source | basic-shape | geometry-box | none \</p><h4 id="分别表示"><a href="#分别表示" class="headerlink" title="分别表示:"></a>分别表示:</h4> <div class="code-wrapper"><pre><code class="hljs processing">clip-source = url <span class="hljs-comment">//可以通过url指定一个元素 \</span>basic-<span class="hljs-built_in">shape</span> = inset | circle | <span class="hljs-built_in">ellipse</span> | polygon  <span class="hljs-comment">// 可以指定图形分别对应 矩形 | 圆 | 椭圆 | 多边形\</span>geometry-<span class="hljs-built_in">box</span> = <span class="hljs-built_in">shape</span>-<span class="hljs-built_in">box</span> | <span class="hljs-built_in">fill</span>-<span class="hljs-built_in">box</span> | <span class="hljs-built_in">stroke</span>-<span class="hljs-built_in">box</span> | view-<span class="hljs-built_in">box</span>\</code></pre></div><h3 id="basic-shape举例"><a href="#basic-shape举例" class="headerlink" title="basic-shape举例"></a>basic-shape举例</h3><ul><li><h4 id="inset"><a href="#inset" class="headerlink" title="inset()"></a>inset()</h4>  <div class="code-wrapper"><pre><code class="hljs vim">// inset可以接收<span class="hljs-number">5</span>个参数，分别为top,<span class="hljs-keyword">right</span>,bottom,<span class="hljs-keyword">left</span>, <span class="hljs-built_in">round</span> radius(可选值，表示圆角)clip-path: inset(<span class="hljs-number">10</span><span class="hljs-keyword">em</span> <span class="hljs-number">20</span><span class="hljs-keyword">em</span> <span class="hljs-number">10</span><span class="hljs-keyword">em</span> <span class="hljs-number">20</span><span class="hljs-keyword">em</span> <span class="hljs-built_in">round</span> <span class="hljs-number">5</span><span class="hljs-keyword">em</span>) // <span class="hljs-built_in">round</span>字符为固定字符</code></pre></div></li><li><h4 id="cirle"><a href="#cirle" class="headerlink" title="cirle()"></a>cirle()</h4>  <div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> cirle可以接收<span class="hljs-number">2</span>个参数，分别为圆的半径，圆的中心点(默认为元素中心点)clip-path: cirle(<span class="hljs-number">50</span>% at <span class="hljs-number">16</span>px <span class="hljs-number">16</span>px) <span class="hljs-regexp">//</span>at 字符为固定字符</code></pre></div></li><li><h4 id="ellipse"><a href="#ellipse" class="headerlink" title="ellipse()"></a>ellipse()</h4><div class="code-wrapper"><pre><code class="hljs xl"><span class="hljs-comment">// ellipse可以接收3个参数，分别为椭圆的X轴半径，椭圆的Y轴半径，圆的中心点(默认为元素中心点)</span>clip-<span class="hljs-built_in">path</span>: <span class="hljs-built_in">ellipse</span>(<span class="hljs-number">50</span>% <span class="hljs-number">60</span>% <span class="hljs-built_in">at</span> <span class="hljs-number">50</span>% <span class="hljs-number">50</span>%) <span class="hljs-comment">//at 字符为固定字符</span></code></pre></div></li><li><h4 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a>polygon()</h4><div class="code-wrapper"><pre><code class="hljs mel"><span class="hljs-comment">// polygon可以接收多组数据，每组数据为拐点坐标(x y),每组数据通过逗号相隔</span><span class="hljs-keyword">clip</span>-path: polygon(<span class="hljs-number">50</span>% <span class="hljs-number">0</span>,<span class="hljs-number">100</span>% <span class="hljs-number">50</span>%,<span class="hljs-number">0</span> <span class="hljs-number">100</span>%)</code></pre></div><ol><li>polygon菱形：  <div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">clip</span>-path: polygon(<span class="hljs-number">50</span>% <span class="hljs-number">0</span>%, <span class="hljs-number">100</span>% <span class="hljs-number">50</span>%, <span class="hljs-number">50</span>% <span class="hljs-number">100</span>%, <span class="hljs-number">0</span>% <span class="hljs-number">50</span>%);</code></pre></div></li><li>polygon梯形：  <div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">clip</span>-path: polygon(<span class="hljs-number">20</span>% <span class="hljs-number">0</span>%, <span class="hljs-number">80</span>% <span class="hljs-number">0</span>%, <span class="hljs-number">100</span>% <span class="hljs-number">100</span>%, <span class="hljs-number">0</span>% <span class="hljs-number">100</span>%);</code></pre></div></li><li>polygon平行四边形形：  <div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">clip</span>-path: polygon(<span class="hljs-number">25</span>% <span class="hljs-number">0</span>%, <span class="hljs-number">100</span>% <span class="hljs-number">0</span>%, <span class="hljs-number">75</span>% <span class="hljs-number">100</span>%, <span class="hljs-number">0</span>% <span class="hljs-number">100</span>%);</code></pre></div></li><li>polygon五边形：  <div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">clip</span>-path: polygon(<span class="hljs-number">50</span>% <span class="hljs-number">0</span>%, <span class="hljs-number">100</span>% <span class="hljs-number">38</span>%, <span class="hljs-number">82</span>% <span class="hljs-number">100</span>%, <span class="hljs-number">18</span>% <span class="hljs-number">100</span>%, <span class="hljs-number">0</span>% <span class="hljs-number">38</span>%);</code></pre></div></li><li>polygon右箭头：  <div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">clip</span>-path: polygon(<span class="hljs-number">0</span>% <span class="hljs-number">20</span>%, <span class="hljs-number">60</span>% <span class="hljs-number">20</span>%, <span class="hljs-number">60</span>% <span class="hljs-number">0</span>%, <span class="hljs-number">100</span>% <span class="hljs-number">50</span>%, <span class="hljs-number">60</span>% <span class="hljs-number">100</span>%, <span class="hljs-number">60</span>% <span class="hljs-number">80</span>%, <span class="hljs-number">0</span>% <span class="hljs-number">80</span>%);</code></pre></div></li><li>polygon左箭头  <div class="code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">clip</span>-path: polygon(<span class="hljs-number">40</span>% <span class="hljs-number">0</span>%, <span class="hljs-number">40</span>% <span class="hljs-number">20</span>%, <span class="hljs-number">100</span>% <span class="hljs-number">20</span>%, <span class="hljs-number">100</span>% <span class="hljs-number">80</span>%, <span class="hljs-number">40</span>% <span class="hljs-number">80</span>%, <span class="hljs-number">40</span>% <span class="hljs-number">100</span>%, <span class="hljs-number">0</span>% <span class="hljs-number">50</span>%);</code></pre></div></li></ol></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
